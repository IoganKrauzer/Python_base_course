# Задача 24: В фермерском хозяйстве в Карелии выращивают чернику. Она растет на
# круглой грядке, причем кусты высажены только по окружности. Таким образом, у
# каждого куста есть ровно два соседних. Всего на грядке растет N кустов.
# Эти кусты обладают разной урожайностью, поэтому ко времени сбора на них
# выросло различное число ягод – на i-ом кусте выросло ai
#  ягод.
# В этом фермерском хозяйстве внедрена система автоматического сбора черники.
# Эта система состоит из управляющего модуля и нескольких собирающих модулей.
# Собирающий модуль за один заход, находясь непосредственно перед некоторым
# кустом, собирает ягоды с этого куста и с двух соседних с ним.
# Напишите программу для нахождения максимального числа ягод, которое может
# собрать за один заход собирающий модуль, находясь перед некоторым кустом заданной во входном списке урожайности грядки.

# 4 -> 1 2 3 4
# 9
import random
import os
os.system('cls')




def fill_list(n):                                # Генерация ягод на кустах
    l_fill = [None] * n
    for i in range(len(l_fill)):
        l_fill[i] = random.randint(1, 7)
    return l_fill

                                                 # Создаем список с комбинациями рядом стоящих кустов.
def creat_value_list(list_1):                    # Замыкаем комбинацией list_1[len(list_1) - 1], list_1[0], list_1[1]                                     
    v_list = []
    list_len = len(list_1)
    list_1.extend(list_1[:2])
    for _ in range(list_len):
        v_list.append(list_1[_:_ + 3])
    del list_1[list_len:]
    return v_list


def sum_of_value(v_list):                        # Список сумм всех комбинаций
    s_list = []
    for k in v_list:
        sum = 0
        for t in k:
            sum += t
        s_list.append(sum)
    return s_list

                                                 # Список индексов максимальных сумм. Если сумм больше одной
def find_largest_amount(s_list):
    max = 0                                      # Нужен для функции larg_amout_comb()
    for i in range(1, len(s_list)):
        if s_list[max] < s_list[i]:
            max = i
    indx_list = [x for x in range(len(s_list)) if s_list[x] == s_list[max]]
    return indx_list

                                                 # Создаем список с комбинациями, дающими максимальную сумму.
def larg_amout_comb(v_list, i_list):
    com_l = [v_list[x] for x in i_list]
    return com_l


def bush_num_check(number, b_num):               # Проверка что такой куст существует
    while b_num not in range(1, number + 1):
        b_num = int(input(
            f"Такого куста не существует. Выберите куст в интервале от {1} до {number} "))
    return b_num


def answer_out(list_1, b_num):                   # Для вывода итогого ответа
    if b_num == len(list_1):
        print(f"С куста {b_num } и рядом стоящих кустов вы соберете => ",
              list_1[0] + list_1[b_num - 2] + list_1[b_num - 1], "ягод")
    else:
        print(f"С куста {b_num } и рядом стоящих кустов вы соберете => ",
              list_1[b_num - 2] + list_1[b_num] + list_1[b_num - 1], "ягод")


def check_num_to_create_list(num):                # Проверка на  создание минимум 3-х кустов
    while num <3:
        num = int(input("Неверное кол-во кустов. Кустов должно быть минимум 3! Введите кол-во кустов: "))
    return num




number = int(input("Введите кол-во кустов: "))
number = check_num_to_create_list(number)
l_1 = fill_list(number)
var_list = creat_value_list(l_1)
sum_list = sum_of_value(var_list)
indx_list = find_largest_amount(sum_list)
print("Количество ягод на кустах: " + ", ".join(map(str, l_1)))
print("Комбинация из кустов рядом стоящих:", end=" ")
print(*var_list)
print(f"Сумма ягод рядом стоящих кустов: {sum_list}")
print(f"Максимальное кол-во ягод: {sum_list[indx_list[0]]}", end=" = > ")
print(*larg_amout_comb(var_list, indx_list))
bush_num = int(input("Выберите куст для сбора урожая: "))    # Код на нахождение максимального числа ягод, которое может
bush_num = bush_num_check(number, bush_num)                  # собрать за один заход собирающий модуль, находясь перед 
answer_out(l_1, bush_num)                                    # некоторым кустом заданной во входном списке урожайности грядки.




# Напишите программу для нахождения максимального числа ягод, которое может
# собрать за один заход собирающий модуль, находясь перед некоторым кустом заданной во входном списке урожайности грядки.


# ----------------------С--П--Р--А--В--К--А--------------------------------
#                                                                         |
# l_1              -------- изначальный список кустов                     |
# var_list         -------- список со всеми комбинациями рядом стоящих    |
# sum_list         -------- список с суммой всех комбинаций               |
# indx_list        -------- список индексов с макс суммой                 |
# bush_num         -------- пользователь выбирает куст                    |
#                                                                         |
# -------------------------------------------------------------------------
